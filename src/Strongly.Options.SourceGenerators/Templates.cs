namespace Strongly.Options.SourceGenerators;

public static class Templates
{
    public static string CreateDependencyInjectionExtensionText(
        string moduleName,
        string configureMethods) =>
        $$"""
          // <auto-generated>
          
          using Microsoft.Extensions.Configuration;
          using Microsoft.Extensions.DependencyInjection;

          namespace {{WellKnownNamings.StronglyOptionsNamespace}}
          {
              public static class StronglyOptionsServiceCollectionExtensions
              {
                  /// <summary>
                  /// Scans current assembly and registers all options types marked with the <see cref="StronglyOptionsAttribute"/>.
                  /// </summary>
                  /// <example>
                  /// <code>
                  /// var configuration = builder.Configuration;
                  /// builder.Services.Add{ModuleName}StronglyOptions(configuration);
                  /// </code>
                  /// </example>
                  public static IServiceCollection Add{{moduleName}}StronglyOptions(
                      this IServiceCollection services,
                      IConfiguration configuration)
                  {
          {{configureMethods}}
              
                      return services;
                  }
                  
                  
                  private static IConfiguration GetConfigurationSection(string sectionName, IConfiguration configuration)
                  {
                      if (sectionName == StronglyOptionsSection.Root)
                          return configuration;
                  
                      var section = configuration.GetSection(sectionName);
                  
                      if (!section.AsEnumerable().Any(x => x.Value is not null))
                          throw new SectionNotFoundException(
                              $"Unable to find {section} section in Configuration");
                  
                      return section;
                  }
              }
          }

          """;

    public static string CreateConfigureMethodInvokeText(
        string fullyQualifiedType,
        string section) =>
        $"""
                    services.Configure<{fullyQualifiedType}>(GetConfigurationSection("{section}", configuration));
        """;
}
